name: "Text Analyzer"

on:
  pull_request:
    paths:
      - '**/*.md'

jobs:
  text-analysis:
    runs-on: ubuntu-latest

    steps:
      # 1. Клонируем репозиторий
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2. Устанавливаем jq
      - name: Install jq
        run: sudo apt-get install -y jq

      # 3. Подтягиваем базовую ветку
      - name: Fetch base branch
        run: |
          BASE_REF=${{ github.event.pull_request.base.ref }}
          if [ -z "$BASE_REF" ]; then
            BASE_REF="main"
          fi
          echo "Fetching origin/$BASE_REF"
          git fetch origin $BASE_REF

      # 4. Получаем изменённые файлы
      - name: Get changed files
        id: get_changed_files
        run: |
          BASE_REF=${{ github.event.pull_request.base.ref }}
          if [ -z "$BASE_REF" ]; then
            BASE_REF="main"
          fi
          CHANGED_FILES=$(git diff --name-only origin/$BASE_REF -- '*.md' | iconv -f utf-8 -t utf-8)
          echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_ENV

      # 5. Анализируем файлы
      - name: Analyze changed Markdown files
        id: analyze_files
        run: |
          CHANGED_FILES="${CHANGED_FILES}"
          echo "Files to analyze: $CHANGED_FILES"

          mkdir -p temp
          REVIEW=""

          for FILE in $CHANGED_FILES; do
            echo "Analyzing file: $FILE"

            # Проверяем наличие файла
            if [ ! -f "$FILE" ]; then
              echo "File not found: $FILE"
              continue
            fi

            # Получаем старую и новую версии файла
            git show origin/${{ github.event.pull_request.base.ref }}:"$FILE" > temp/old_version.md 2>/dev/null || echo "" > temp/old_version.md
            cat "$FILE" > temp/new_version.md 2>/dev/null || echo "" > temp/new_version.md

            # Проверяем содержимое
            if [ ! -s temp/old_version.md ] && [ ! -s temp/new_version.md ]; then
              echo "Both versions of the file are empty. Skipping analysis."
              continue
            fi

            # Преобразуем содержимое в JSON (проверка валидности)
            OLD_TEXT=$(cat temp/old_version.md | jq -Rs . || echo "{}")
            NEW_TEXT=$(cat temp/new_version.md | jq -Rs . || echo "{}")

            # Hugging Face токен
            HF_TOKEN="${{ secrets.HUGGINGFACE_TOKEN }}"

            # Анализ тональности
            OLD_SENTIMENT=$(curl -s -X POST -H "Authorization: Bearer $HF_TOKEN" -H "Content-Type: application/json" \
              -d "{\"inputs\": $OLD_TEXT}" https://api-inference.huggingface.co/models/blanchefort/rubert-base-cased-sentiment || echo "{}")

            NEW_SENTIMENT=$(curl -s -X POST -H "Authorization: Bearer $HF_TOKEN" -H "Content-Type: application/json" \
              -d "{\"inputs\": $NEW_TEXT}" https://api-inference.huggingface.co/models/blanchefort/rubert-base-cased-sentiment || echo "{}")

            # Проверяем, является ли результат валидным JSON
            OLD_SENTIMENT_VALID=$(echo "$OLD_SENTIMENT" | jq empty >/dev/null 2>&1 && echo "true" || echo "false")
            NEW_SENTIMENT_VALID=$(echo "$NEW_SENTIMENT" | jq empty >/dev/null 2>&1 && echo "true" || echo "false")

            if [ "$OLD_SENTIMENT_VALID" != "true" ] || [ "$NEW_SENTIMENT_VALID" != "true" ]; then
              echo "Invalid JSON from sentiment analysis. Skipping file."
              continue
            fi

            # Обобщение текста
            OLD_SUMMARY=$(curl -s -X POST -H "Authorization: Bearer $HF_TOKEN" -H "Content-Type: application/json" \
              -d "{\"inputs\": $OLD_TEXT}" https://api-inference.huggingface.co/models/IlyaGusev/rugpt3medium_sum || echo "{}")

            NEW_SUMMARY=$(curl -s -X POST -H "Authorization: Bearer $HF_TOKEN" -H "Content-Type: application/json" \
              -d "{\"inputs\": $NEW_TEXT}" https://api-inference.huggingface.co/models/IlyaGusev/rugpt3medium_sum || echo "{}")

            # Проверяем, является ли результат валидным JSON
            OLD_SUMMARY_VALID=$(echo "$OLD_SUMMARY" | jq empty >/dev/null 2>&1 && echo "true" || echo "false")
            NEW_SUMMARY_VALID=$(echo "$NEW_SUMMARY" | jq empty >/dev/null 2>&1 && echo "true" || echo "false")

            if [ "$OLD_SUMMARY_VALID" != "true" ] || [ "$NEW_SUMMARY_VALID" != "true" ]; then
              echo "Invalid JSON from summarization. Skipping file."
              continue
            fi

            # Формируем отчёт
            REVIEW+="\n### Анализ файла: ${FILE}\n\n"
            REVIEW+="**Анализ старой версии (Hugging Face):**\n\`\`\`\n$OLD_SENTIMENT\n\`\`\`\n\n"
            REVIEW+="**Анализ новой версии (Hugging Face):**\n\`\`\`\n$NEW_SENTIMENT\n\`\`\`\n\n"
            REVIEW+="**Обобщение старого текста:**\n\`\`\`\n$(echo "$OLD_SUMMARY" | jq -r '.[0].summary_text')\n\`\`\`\n\n"
            REVIEW+="**Обобщение нового текста:**\n\`\`\`\n$(echo "$NEW_SUMMARY" | jq -r '.[0].summary_text')\n\`\`\`\n\n"
          done

          # Сохраняем отчёт в Environment File
          echo "REVIEW<<EOF" >> $GITHUB_ENV
          echo "$REVIEW" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # 6. Добавляем отчёт в комментарий
      - name: Leave a comment
        uses: actions/github-script@v6
        with:
          script: |
            const review = process.env.REVIEW;
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: review
            });
