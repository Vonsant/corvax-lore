name: "Text Analyzer"

on:
  pull_request:
    paths:
      - '**/*.md'

jobs:
  text-analysis:
    runs-on: ubuntu-latest

    steps:
      # Проверка репозитория
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Загружаем не только последний коммит, чтобы получить предыдущую версию файла

      # Установка jq для обработки JSON
      - name: Install jq
        run: sudo apt-get install -y jq

      # Сбор изменений из PR
      - name: Get changed files
        id: get_changed_files
        run: |
          # Убедимся, что базовая ветка извлечена
          git fetch origin ${{ github.event.pull_request.base.ref }}:refs/remotes/origin/${{ github.event.pull_request.base.ref }}
          # Сбор измененных файлов
          CHANGED_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }} -- '*.md')
          echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_ENV

      # Анализ текста файлов
      - name: Analyze changed Markdown files
        id: analyze_files
        run: |
          echo "Начинаем анализ измененных файлов:"
          REVIEW=""
          for FILE in $CHANGED_FILES; do
            echo "Анализ файла: $FILE"
            
            # Получение старой версии файла
            git show origin/${{ github.event.pull_request.base.ref }}:$FILE > old_version.md
            # Получение новой версии файла
            cat $FILE > new_version.md
            # Анализ старой версии текста (Hugging Face Sentiment Analysis)
            OLD_TEXT=$(cat old_version.md | jq -Rs .)
            OLD_SENTIMENT=$(curl -s -X POST -H "Content-Type: application/json" \
              -d "{\"inputs\": $OLD_TEXT}" \
              https://api-inference.huggingface.co/models/blanchefort/rubert-base-cased-sentiment)
            # Анализ новой версии текста (Hugging Face Sentiment Analysis)
            NEW_TEXT=$(cat new_version.md | jq -Rs .)
            NEW_SENTIMENT=$(curl -s -X POST -H "Content-Type: application/json" \
              -d "{\"inputs\": $NEW_TEXT}" \
              https://api-inference.huggingface.co/models/blanchefort/rubert-base-cased-sentiment)
            # Обобщение старого текста
            OLD_SUMMARY=$(curl -s -X POST -H "Content-Type: application/json" \
              -d "{\"inputs\": $OLD_TEXT}" \
              https://api-inference.huggingface.co/models/facebook/bart-large-cnn)
            # Обобщение нового текста
            NEW_SUMMARY=$(curl -s -X POST -H "Content-Type: application/json" \
              -d "{\"inputs\": $NEW_TEXT}" \
              https://api-inference.huggingface.co/models/facebook/bart-large-cnn)
            # Сравнение обобщений
            SUMMARY_COMPARISON=$(diff <(echo "$OLD_SUMMARY" | jq -r '.[0].summary_text') <(echo "$NEW_SUMMARY" | jq -r '.[0].summary_text') || true)
            # Проверка орфографии с помощью Yandex.Speller
            SPELLING_ERRORS=$(curl -s -X POST "https://speller.yandex.net/services/spellservice.json/checkText" \
              -H "Content-Type: application/x-www-form-urlencoded" \
              -d "text=$(cat new_version.md)&lang=ru")
            # Формирование отчета
            REVIEW+="\n### Анализ файла: $FILE\n\n"
            REVIEW+="**Анализ старой версии (Hugging Face):**\n$OLD_SENTIMENT\n\n"
            REVIEW+="**Анализ новой версии (Hugging Face):**\n$NEW_SENTIMENT\n\n"
            REVIEW+="**Обобщение старого текста:**\n$OLD_SUMMARY\n\n"
            REVIEW+="**Обобщение нового текста:**\n$NEW_SUMMARY\n\n"
            if [ -n "$SUMMARY_COMPARISON" ]; then
              REVIEW+="**Изменения в обобщении текста:**\n$SUMMARY_COMPARISON\n\n"
            else
              REVIEW+="**Обобщение текста осталось без изменений.**\n\n"
            fi
            if [ "$SPELLING_ERRORS" != "[]" ]; then
              REVIEW+="**Ошибки орфографии (Yandex.Speller):**\n"
              REVIEW+=$(echo "$SPELLING_ERRORS" | jq -r '.[] | "- Ошибка: " + .word + ", Возможные варианты: " + (.s | join(", "))')
              REVIEW+="\n\n"
            else
              REVIEW+="**Ошибок орфографии не обнаружено.**\n\n"
            fi
          done
          echo "::set-output name=review::$REVIEW"

      # Вывод ревью в комментарий к PR
      - name: Leave a comment
        uses: actions/github-script@v6
        with:
          script: |
            const review = `{{ steps.analyze_files.outputs.review }}`;
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: review
            });
