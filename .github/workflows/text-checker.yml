name: "Text Analyzer"

on:
  pull_request:
    # Ловим Pull Request события
    branches:
      - main
    # Анализируем только *.md файлы (по вашему условию)
    paths:
      - '**/*.md'

jobs:
  text-analysis:
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Клонируем репозиторий и подтягиваем все ветки/историю
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          # fetch-depth: 0 — полный клон, чтобы гарантированно было видно origin/main
          fetch-depth: 0

      # Шаг 2: Установка jq (если нужно)
      - name: Install jq
        run: sudo apt-get install -y jq

      # Шаг 3: (опционально) посмотреть, что у нас есть локально:
      - name: Debug info
        run: |
          echo ">>> Remotes:"
          git remote -v
          echo ">>> Branches (local and remote):"
          git branch -a
          echo ">>> PR base ref: ${{ github.event.pull_request.base.ref }}"
          echo ">>> PR head ref: ${{ github.event.pull_request.head.ref }}"

      # Шаг 4: Подтягиваем ещё раз базовую ветку конкретного PR (на случай, если не подтянулась):
      - name: Fetch base branch
        run: |
          BASE_REF=${{ github.event.pull_request.base.ref }}
          if [ -z "$BASE_REF" ]; then
            BASE_REF="main"
          fi
          echo "Fetching origin/$BASE_REF..."
          git fetch origin $BASE_REF

      # Шаг 5: Получаем список изменённых *.md файлов
      - name: Get changed files
        id: get_changed_files
        run: |
          BASE_REF=${{ github.event.pull_request.base.ref }}
          if [ -z "$BASE_REF" ]; then
            BASE_REF="main"
          fi
          echo "Сравниваем с веткой: origin/$BASE_REF"
          
          # Собираем список изменённых .md-файлов
          CHANGED_FILES=$(git diff --name-only origin/$BASE_REF -- '*.md')
          
          echo "Найденные изменённые файлы:"
          echo "$CHANGED_FILES"
          
          echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_ENV

      # Шаг 6: Анализируем изменённые файлы (пример из вашего кода)
      - name: Analyze changed Markdown files
        id: analyze_files
        run: |
          echo "Начинаем анализ изменённых файлов:"
          CHANGED_FILES="${CHANGED_FILES}"

          REVIEW=""
          for FILE in $CHANGED_FILES; do
            echo "Анализ файла: $FILE"
            # ... ваш произвольный анализ ...
          done
          
          echo "::set-output name=review::$REVIEW"

      # Шаг 7: Комментируем результаты (пример)
      - name: Leave a comment
        uses: actions/github-script@v6
        with:
          script: |
            const review = `{{ steps.analyze_files.outputs.review }}`;
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: review
            });
