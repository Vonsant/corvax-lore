name: "Text Analyzer"

on:
  pull_request:
    paths:
      - '**/*.md'

jobs:
  text-analysis:
    runs-on: ubuntu-latest

    steps:
      # 1. Клонируем репозиторий
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2. Устанавливаем jq
      - name: Install jq
        run: sudo apt-get install -y jq

      # 3. Подтягиваем базовую ветку
      - name: Fetch base branch
        run: |
          BASE_REF=${{ github.event.pull_request.base.ref }}
          if [ -z "$BASE_REF" ]; then
            BASE_REF="main"
          fi
          echo "Fetching origin/$BASE_REF"
          git fetch origin $BASE_REF

      # 4. Получаем изменённые файлы
      - name: Get changed files
        id: get_changed_files
        run: |
          BASE_REF=${{ github.event.pull_request.base.ref }}
          if [ -z "$BASE_REF" ]; then
            BASE_REF="main"
          fi
          CHANGED_FILES=$(git diff --name-only origin/$BASE_REF -- '*.md' | iconv -f utf-8 -t utf-8)
          echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_ENV

      # 5. Анализируем файлы
      - name: Analyze changed Markdown files
        id: analyze_files
        run: |
          CHANGED_FILES="${CHANGED_FILES}"
          echo "Files to analyze: $CHANGED_FILES"

          mkdir -p temp
          REVIEW=""

          for FILE in $CHANGED_FILES; do
            echo "Analyzing file: $FILE"

            # Получаем старую и новую версии файла
            git show origin/${{ github.event.pull_request.base.ref }}:"$FILE" > temp/old_version.md 2>/dev/null || echo "" > temp/old_version.md
            cat "$FILE" > temp/new_version.md 2>/dev/null || echo "" > temp/new_version.md

            # Преобразуем содержимое в JSON
            OLD_TEXT=$(cat temp/old_version.md | jq -Rs .)
            NEW_TEXT=$(cat temp/new_version.md | jq -Rs .)

            # Hugging Face токен
            HF_TOKEN="${{ secrets.HUGGINGFACE_TOKEN }}"

            # Анализ через Hugging Face API
            OLD_SENTIMENT=$(curl -s -X POST -H "Authorization: Bearer $HF_TOKEN" -H "Content-Type: application/json" \
              -d "{\"inputs\": $OLD_TEXT}" https://api-inference.huggingface.co/models/blanchefort/rubert-base-cased-sentiment)

            NEW_SENTIMENT=$(curl -s -X POST -H "Authorization: Bearer $HF_TOKEN" -H "Content-Type: application/json" \
              -d "{\"inputs\": $NEW_TEXT}" https://api-inference.huggingface.co/models/blanchefort/rubert-base-cased-sentiment)

            OLD_SUMMARY=$(curl -s -X POST -H "Authorization: Bearer $HF_TOKEN" -H "Content-Type: application/json" \
              -d "{\"inputs\": $OLD_TEXT}" https://api-inference.huggingface.co/models/facebook/bart-large-cnn)

            NEW_SUMMARY=$(curl -s -X POST -H "Authorization: Bearer $HF_TOKEN" -H "Content-Type: application/json" \
              -d "{\"inputs\": $NEW_TEXT}" https://api-inference.huggingface.co/models/facebook/bart-large-cnn)

            # Сравнение обобщений
            SUMMARY_COMPARISON=$(diff <(echo "$OLD_SUMMARY" | jq -r '.[0].summary_text') <(echo "$NEW_SUMMARY" | jq -r '.[0].summary_text') || true)

            # Формируем отчёт
            REVIEW+="\n### Анализ файла: ${FILE}\n\n"
            REVIEW+="**Анализ старой версии (Hugging Face):**\n\`\`\`\n$OLD_SENTIMENT\n\`\`\`\n\n"
            REVIEW+="**Анализ новой версии (Hugging Face):**\n\`\`\`\n$NEW_SENTIMENT\n\`\`\`\n\n"
            REVIEW+="**Обобщение старого текста:**\n\`\`\`\n$OLD_SUMMARY\n\`\`\`\n\n"
            REVIEW+="**Обобщение нового текста:**\n\`\`\`\n$NEW_SUMMARY\n\`\`\`\n\n"

            if [ -n "$SUMMARY_COMPARISON" ]; then
              REVIEW+="**Изменения в обобщении текста:**\n\`\`\`\n$SUMMARY_COMPARISON\n\`\`\`\n\n"
            else
              REVIEW+="**Обобщение текста осталось без изменений.**\n\n"
            fi

            # Проверка орфографии через Yandex.Speller
            SPELLING_ERRORS=$(curl -s -X POST "https://speller.yandex.net/services/spellservice.json/checkText" \
              -H "Content-Type: application/x-www-form-urlencoded" \
              -d "text=$(cat temp/new_version.md)&lang=ru")

            if [ "$SPELLING_ERRORS" != "[]" ]; then
              REVIEW+="**Ошибки орфографии (Yandex.Speller):**\n"
              REVIEW+=$(echo "$SPELLING_ERRORS" | jq -r '.[] | "- Ошибка: " + .word + ", Возможные варианты: " + (.s | join(", "))')
              REVIEW+="\n\n"
            else
              REVIEW+="**Ошибок орфографии не обнаружено.**\n\n"
            fi
          done

          # Сохраняем отчёт в Environment File
          echo "REVIEW<<EOF" >> $GITHUB_ENV
          echo "$REVIEW" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # 6. Добавляем отчёт в комментарий
      - name: Leave a comment
        uses: actions/github-script@v6
        with:
          script: |
            const review = process.env.REVIEW;
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: review
            });
