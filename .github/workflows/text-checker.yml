name: "Text Analyzer"

on:
  pull_request:
    # Запуск только на Pull Request. 
    # Если хотите анализировать только при изменениях *.md, оставьте paths.
    paths:
      - '**/*.md'

jobs:
  text-analysis:
    runs-on: ubuntu-latest

    steps:
      # 1) Клонируем репозиторий с полной историей
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          # fetch-depth: 0 — чтобы гарантированно иметь локально origin/main
          fetch-depth: 0

      # 2) Устанавливаем jq (для обработки JSON)
      - name: Install jq
        run: sudo apt-get install -y jq

      # (Необязательно) Шаг отладки — можно раскомментировать, если нужно посмотреть, какие ветки есть локально
      - name: Debug info
        run: |
          echo ">>> Debug Info:"
          echo "Remotes:"
          git remote -v
          echo "Branches (локальные + remote):"
          git branch -a
          echo "PR base ref: ${{ github.event.pull_request.base.ref }}"
          echo "PR head ref: ${{ github.event.pull_request.head.ref }}"

      # 3) Явно подтягиваем базовую ветку (ветку, в которую идёт PR).
      #    Если PR в main, значит это будет origin/main.
      - name: Fetch base branch
        run: |
          BASE_REF=${{ github.event.pull_request.base.ref }}
          if [ -z "$BASE_REF" ]; then
            # На всякий случай fallback
            BASE_REF="main"
          fi
          echo ">>> Fetching origin/$BASE_REF"
          git fetch origin $BASE_REF

      # 4) Получаем список изменённых *.md-файлов в сравнении с базовой веткой
      - name: Get changed files
        id: get_changed_files
        run: |
          BASE_REF=${{ github.event.pull_request.base.ref }}
          if [ -z "$BASE_REF" ]; then
            BASE_REF="main"
          fi
          echo ">>> Сравниваем с веткой: origin/$BASE_REF"

          # Собираем список изменённых *.md-файлов
          CHANGED_FILES=$(git diff --name-only origin/$BASE_REF -- '*.md')
          echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_ENV

          echo ">>> Найденные изменённые файлы:"
          echo "$CHANGED_FILES"

      # 5) Анализируем изменённые Markdown-файлы
      - name: Analyze changed Markdown files
        id: analyze_files
        run: |
          echo "Начинаем анализ изменённых файлов:"
          
          # Переменная из предыдущего шага
          CHANGED_FILES="${CHANGED_FILES}"
          echo "Files to analyze: $CHANGED_FILES"

          # Сюда будем складывать результат (текст комментария)
          REVIEW=""

          # Создадим временную папку, чтобы не затирать файлы
          mkdir -p temp

          # Перебираем все изменённые файлы
          for FILE in $CHANGED_FILES; do
            echo "Анализ файла: $FILE"

            # Получаем "старую" версию файла из базовой ветки (если файл отсутствовал — получится пусто)
            git show origin/${{ github.event.pull_request.base.ref }}:$FILE > temp/old_version.md 2>/dev/null || echo "" > temp/old_version.md

            # Новая версия (текущий файл из HEAD PR)
            cat "$FILE" > temp/new_version.md 2>/dev/null || echo "" > temp/new_version.md

            # Превращаем содержимое старой/новой версии в JSON-строку
            OLD_TEXT=$(cat temp/old_version.md | jq -Rs .)
            NEW_TEXT=$(cat temp/new_version.md | jq -Rs .)

            # Анализ тональности (старый текст)
            OLD_SENTIMENT=$(curl -s -X POST -H "Content-Type: application/json" \
              -d "{\"inputs\": $OLD_TEXT}" \
              https://api-inference.huggingface.co/models/blanchefort/rubert-base-cased-sentiment)

            # Анализ тональности (новый текст)
            NEW_SENTIMENT=$(curl -s -X POST -H "Content-Type: application/json" \
              -d "{\"inputs\": $NEW_TEXT}" \
              https://api-inference.huggingface.co/models/blanchefort/rubert-base-cased-sentiment)

            # Обобщение (старый текст)
            OLD_SUMMARY=$(curl -s -X POST -H "Content-Type: application/json" \
              -d "{\"inputs\": $OLD_TEXT}" \
              https://api-inference.huggingface.co/models/facebook/bart-large-cnn)

            # Обобщение (новый текст)
            NEW_SUMMARY=$(curl -s -X POST -H "Content-Type: application/json" \
              -d "{\"inputs\": $NEW_TEXT}" \
              https://api-inference.huggingface.co/models/facebook/bart-large-cnn)

            # Сравнение кратких обобщений через diff (если отличаются)
            SUMMARY_COMPARISON=$(diff <(echo "$OLD_SUMMARY" | jq -r '.[0].summary_text') <(echo "$NEW_SUMMARY" | jq -r '.[0].summary_text') || true)

            # Проверка орфографии (новая версия) через Yandex.Speller
            SPELLING_ERRORS=$(curl -s -X POST "https://speller.yandex.net/services/spellservice.json/checkText" \
              -H "Content-Type: application/x-www-form-urlencoded" \
              -d "text=$(cat temp/new_version.md)&lang=ru")

            # Формируем блок отчёта
            REVIEW+="\n### Анализ файла: $FILE\n\n"
            REVIEW+="**Анализ старой версии (Hugging Face):**\n$OLD_SENTIMENT\n\n"
            REVIEW+="**Анализ новой версии (Hugging Face):**\n$NEW_SENTIMENT\n\n"
            REVIEW+="**Обобщение старого текста:**\n$OLD_SUMMARY\n\n"
            REVIEW+="**Обобщение нового текста:**\n$NEW_SUMMARY\n\n"

            if [ -n "$SUMMARY_COMPARISON" ]; then
              REVIEW+="**Изменения в обобщении текста:**\n$SUMMARY_COMPARISON\n\n"
            else
              REVIEW+="**Обобщение текста осталось без изменений.**\n\n"
            fi

            if [ "$SPELLING_ERRORS" != "[]" ]; then
              REVIEW+="**Ошибки орфографии (Yandex.Speller):**\n"
              REVIEW+=$(echo "$SPELLING_ERRORS" | jq -r '.[] | "- Ошибка: " + .word + ", Возможные варианты: " + (.s | join(", "))')
              REVIEW+="\n\n"
            else
              REVIEW+="**Ошибок орфографии не обнаружено.**\n\n"
            fi
          done

          # Передаём отчёт (REVIEW) на выход шага
          echo "::set-output name=review::$REVIEW"

      # 6) Выводим общий отчёт в комментарий
      - name: Leave a comment
        uses: actions/github-script@v6
        with:
          script: |
            const review = `{{ steps.analyze_files.outputs.review }}`;
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: review
            });
